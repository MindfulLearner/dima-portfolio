on:
  workflow_call: 
    inputs:
        build-only:
            required: false
            default: false
            type: boolean
        image-id:
            required: false
            type: string
            default: "master-latest"
        namespace:
            required: true
            default: master
            type: string

name: _build
env:
  CACHE_BUSTER: 17
  DOCKER_CACHE_BUSTER: 12
  DOCKER_BUILDKIT: 1
  NAMESPACE: ${{ inputs.namespace }}
  FALLBACK_NAMESPACE: master

  IMAGE_ID: ${{ inputs.image-id }}
  BUILD_ONLY: ${{ inputs.build-only }}

  TEST_USE_FULL_DIST: true

  BUILD_ONLY_PR: ${{ inputs.build-only }}

## dockerize by inputs

## build api
jobs:
  build_frontend:
    runs-on: ubuntu-latest

    # adding build
    steps:
      - name: "Checkout Github Action"
        uses: actions/checkout@v4

      - name: "Install Node.js"
        uses: actions/setup-node@v4
        with:
          node-version: 22.14.0

      - uses: "pnpm/action-setup@v3"
        name: Install pnpm
        id: pnpm-install
        with: 
          version: 10
          run_install: false

      # needed for perf 
      - name: Get pnpm store directory
        id: pnpm-store
        run: |
          echo "::set-output name=pnpm_store::$(pnpm store path)"

      - name: "install packages"
        run: |
          pnpm install
        env: 
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: "build frontend"
        run: |
          pnpm build

      - name: Push
        run: |
          echo "IMAGE_ID: ${{ env.IMAGE_ID }}"

  cronology_check:
    runs-on: ubuntu-latest
    needs: build_frontend
    if: ${{ needs.build_frontend.outputs.cronology_check_success == 'true' }}
    steps:
      - name: Check modified files
        uses: actions/github-script@v6
        with:
          script: |
            const files = await github.paginate(
              github.pulls.listFiles,
              {
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: context.payload.pull_request.number,
              }
            );

            const onlyCronology = files.every(f => f.filename === "cronology.md");

            if (!onlyCronology) {
              core.setFailed("The PR modifies files other than cronology.md. Merge not allowed.");
            } else {
              console.log("Only cronology.md modified: OK.");
            }